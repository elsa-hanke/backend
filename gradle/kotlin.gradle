import org.gradle.internal.os.OperatingSystem

apply plugin: "kotlin" // Required for Kotlin integration
apply plugin: "kotlin-kapt" // Required for annotations processing
apply plugin: "kotlin-spring" // See https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support
apply plugin: "kotlin-allopen" // See https://kotlinlang.org/docs/reference/compiler-plugins.html#using-in-gradle
apply plugin: "kotlin-jpa" // See https://kotlinlang.org/docs/reference/compiler-plugins.html#jpa-support

apply plugin: "org.jlleitschuh.gradle.ktlint"

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"

    kapt "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    kapt "org.hibernate:hibernate-jpamodelgen:${hibernateVersion}"
    kapt "org.glassfish.jaxb:jaxb-runtime:${jaxbRuntimeVersion}"

    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:${kotlinVersion}"

    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
}

allOpen {
    annotation("javax.persistence.Entity")
    annotation("javax.persistence.MappedSuperclass")
    annotation("javax.persistence.Embeddable")
}

[compileKotlin, compileTestKotlin]*.with {
    kotlinOptions {
        jvmTarget = "11"
        javaParameters = true
        freeCompilerArgs = ["-Xjvm-default=enable"]
    }
}

ktlint {
    // See more options: https://github.com/JLLeitschuh/ktlint-gradle#configuration
    version.set("0.45.1")
    ignoreFailures = true
    disabledRules = ["no-wildcard-imports", "filename"]
}
check.dependsOn ktlintCheck

if (OperatingSystem.current().isWindows()) {
    bootRun {
        doFirst {
            classpath += files("$buildDir/classes/kotlin/main")
        }
    }
}


jacocoTestReport {
    // Add Kotlin sources to Jacoco source dirs
    sourceDirectories.from += sourceSets.main.kotlin.srcDirs
}

check.dependsOn jacocoTestReport
