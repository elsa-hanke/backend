name: $(date:yyyy-MM-dd)$(rev:.r)
variables:
  vmImageName: 'Ubuntu 16.04'
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  tag: $(Build.BuildNumber)
  ACCOUNT_ID_DEV: '939452229770'
  ACCOUNT_ID_STAGING: '599051528004'
  AWS_DEFAULT_REGION: 'eu-west-1'
  IMAGE_REPO_NAME: 'ecr-dev-backend'

stages:
  - stage: Build
    displayName: Build and push stage
    jobs:
      - job: Build
        pool:
          vmImage: $(vmImageName)
        variables:
          NODE_VERSION: 12.16.1
          SPRING_OUTPUT_ANSI_ENABLED: NEVER
          SPRING_JPA_SHOW_SQL: false
          JHI_DISABLE_WEBPACK_LOGS: true
          GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle
          TERM: dumb

        steps:
          - task: Cache@2
            inputs:
              key: 'gradle | "$(Agent.OS)"'
              restoreKeys: gradle
              path: $(GRADLE_USER_HOME)
            displayName: Gradle build cache
          - script: |
              ./gradlew checkstyleNohttp
              ./gradlew clean test integrationTest
            displayName: 'Test'
          - script: |
              ./gradlew dependencyCheckAnalyze
            continueOnError: true
            displayName: 'Dependency check'
          - publish: $(System.DefaultWorkingDirectory)/build/reports/dependency-check-report.html
            artifact: DependencyCheck
            continueOnError: true
            displayName: 'Upload dependency check artifact'
          - script: |
              ./gradlew --build-cache build -x test integrationTest
            displayName: 'Build'
          - script: |
              ./gradlew bootJar -Ptag=$(tag) -Pprod -x test jibDockerBuild
            displayName: 'Build image'
          - script: |
              ./gradlew --stop
            displayName: 'Gradle daemon stop'
          - task: ECRPushImage@1
            condition: eq(variables.isMain, true)
            inputs:
              awsCredentials: 'elsa-ci'
              regionName: 'eu-west-1'
              imageSource: 'imagename'
              sourceImageName: 'elsabackend'
              repositoryName: 'ecr-dev-backend'
              pushTag: $(tag)
            displayName: 'Push image'

  - stage: Deploy_backend_dev
    displayName: Deploy backend dev
    dependsOn: Build
    condition: and(succeeded(), eq(variables.isMain, true))
    jobs:
      - deployment: Deploy
        displayName: Deploy backend dev
        environment: "development"
        pool:
          vmImage: $(vmImageName)
        strategy:
          runOnce:
            deploy:
              steps:
                # - task: AmazonWebServices.aws-vsts-tools.AWSShellScript.AWSShellScript@1
                #   inputs:
                #     awsCredentials: 'elsa-ci'
                #     regionName: 'eu-west-1'
                #     scriptType: inline
                #     inlineScript: 'aws ecs update-service --cluster elsa-dev-cluster --service elsa-dev-backend-service --task-definition elsa-dev-backend --force-new-deployment > /dev/null'
                - task: AWSShellScript@1
                  inputs:
                    awsCredentials: 'elsa-ci'
                    regionName: 'eu-west-1'
                    scriptType: 'inline'
                    inlineScript: |
                      set -e
                      ECR_IMAGE="939452229770.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:$env:tag"
                      
                      TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "elsa-dev-backend" --region "$AWS_DEFAULT_REGION")
                      
                      NEW_TASK_DEFINTIION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_IMAGE" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
                      
                      NEW_TASK_INFO=$(aws ecs register-task-definition --region "$AWS_DEFAULT_REGION" --cli-input-json "$NEW_TASK_DEFINTIION")
                      
                      NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
                      aws ecs update-service --cluster elsa-dev-cluster \
                                             --service elsa-dev-backend-service \
                                             --task-definition elsa-dev-backend:${NEW_REVISION} \
                                             --force-new-deployment
                  displayName: Force update ecs service

  - stage: Deploy_backend_testi
    displayName: Deploy testi
    dependsOn: Build
    condition: and(succeeded(), eq(variables.isMain, true))
    jobs:
      - deployment: Deploy
        displayName: Deploy testi
        environment: "testi"
        pool:
          vmImage: $(vmImageName)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AmazonWebServices.aws-vsts-tools.AWSShellScript.AWSShellScript@1
                  inputs:
                    awsCredentials: 'staging-elsa-ci'
                    regionName: 'eu-west-1'
                    scriptType: inline
                    inlineScript: 'aws ecs update-service --cluster elsa-staging-cluster --service elsa-staging-backend-service --task-definition elsa-staging-backend --force-new-deployment > /dev/null'
                  displayName: Force update ecs service
